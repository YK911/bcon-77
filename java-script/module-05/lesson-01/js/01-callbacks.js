/**
 * –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback)
 *
 * - –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
 * - –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
 * - –Ü–Ω–ª–∞–π–Ω-–∫–æ–ª–±–µ–∫–∏
 */

function fnA(message, callback) {
  // message = ""
  // callback = function (){}

  console.log(message);
  // console.log(callback);
  callback(message);
}

function fnB(number) {
  console.log('Log during fnB execution ', number);
}

// HOF - High order function
// fnA('A message', fnB);

// fnA('Some msg', logger);

function logger(message) {
  console.log(message);
}

// fnB(10);

/**
 * –§—É–Ω–∫—Ü—ñ—è calc(a, b, callback)
 */

function calc(a, b, callback) {
  const result = callback(a, b);
  // console.log('üöÄ ~ calc ~ result:', result);
}

function multiply(x, y) {
  return x * y;
}

function diff(x, y) {
  return x - y;
}

function pow(base, exponent) {
  return base ** exponent;
}

// calc(2, 3, multiply);

// calc(10, 8, diff);

// calc(12, 2, pow);

/**
 * –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤,
 * –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è
 * each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å
 * —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.
 */

function each(array, callback) {
  // console.log(array);
  const arr = [];

  for (const element of array) {
    const calcValue = callback(element);

    arr.push(calcValue);
  }

  return arr;
}

const res1 = each([64, 49, 36, 25, 16], function (value) {
  return value * 2;
});
// console.log('üöÄ ~ res1:', res1);

const res2 = each([64, 49, 36, 25, 16], function (value) {
  return value - 10;
});
// console.log('üöÄ ~ res2:', res2);

const res3 = each([64, 49, 36, 25, 16], function (value) {
  return Math.sqrt(value);
});
// console.log('üöÄ ~ res3:', res3);

const res4 = each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
  return Math.ceil(value);
});
// console.log('üöÄ ~ res4:', res4);

const res5 = each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
  return Math.floor(value);
});
// console.log('üöÄ ~ res5:', res5);
