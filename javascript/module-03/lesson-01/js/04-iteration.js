/**
 * –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –º–∞—Å–∏–≤—É
 *
 * - –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –º–∞—Å–∏–≤—É —Ü–∏–∫–ª–æ–º for
 * - –ú–µ—Ç–æ–¥ includes
 * - –¶–∏–∫–ª for...of
 * - –†—ñ–∑–Ω–∏—Ü—è —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ for —ñ for...of
 */

const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// console.table(friends);

// for (let i = 0; i < friends.length; i++) {
//   // console.log(i);
//   const friend = friends[i];
//   const output = `${i + 1}: ${friend}`
//   console.log("üöÄ ~ friend", output)
// }

// const newFriends = []

// for (let i = 0; i < friends.length; i++) {
//   const friend = friends[i];
//   // console.log("üöÄ ~ friend:", friend)

//   // if (friend === "Poly") {
//   //   console.log("We find Poly");
//   //   continue;
//   // }

//   // newFriends.push(friend);

//   if (friend !== "Poly") {
//     newFriends.push(friend);
//   }
// }
// console.log("üöÄ ~ newFriends:", newFriends)

// console.table(friends);

// for (let friend of friends) {
//   console.log(friend);
//   console.log(friends);
// }

// for (let i = friends.length - 1; i >= 0; i--) {
//   const friend = friends[i];
//   console.log("üöÄ ~ friend:", friend)
// }

/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
 * –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.
 * –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
 */

const values = "8 11";
const params = values.split(" ")
// console.log("üöÄ ~ params:", params)
const width = params[0]
const height = params[1]

const square = width * height
// console.log("üöÄ ~ square:", square)

const names = "'1,Mango', '2,Poly', '3,Ajax'"

const rows = names.split(", ")
// console.log(rows);

const data = []

for (const element of rows) {
  const updElem = element.replaceAll("'", "")
  const value = updElem.split(',')
  data.push(value)
}

// console.log(data);
// console.log(data[0][1]);


/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits.
 * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫
 * —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞.
 * –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 */

const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã"];

// let counter = 1;

// for (const fruit of fruits) {
//   const msg = `${counter}: ${fruit}`;
//   console.log(msg);
//   counter++;
// }

let message = `
| N | Name |\n------------\n`

for (let i = 0; i < fruits.length; i++) {
  const friut = fruits[i];
  message += `| ${i + 1} | ${friut.padEnd(4)} |\n`
}

// console.log(message);
