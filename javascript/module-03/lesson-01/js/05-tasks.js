/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î —Å—É–º—É –≤—Å—ñ—Ö –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.
 */

const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
let total = 0;

for (const number of numbers) {
  // console.log(number);
  if (number % 2 === 0) {
    total += number
  }
}

// console.log(total);


/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
 * —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω—ñ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞
 * –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
 */

const names = "Jacob,William,Solomon,Artemis";
const phones = "89001234567,89001112233,890055566377,890055566300";

const namesArr = names.split(',')
// console.log("üöÄ ~ namesArr:", namesArr)
const phonesArr = phones.split(',')
// console.log("üöÄ ~ phonesArr:", phonesArr)

for (let i = 0; i < namesArr.length; i++) {
  const name = namesArr[i];
  const phone = phonesArr[i];

  // `üì± - ${namesArr[i]} ${phonesArr[i]}`

  const print = `üì± - ${name} ${phone}`
  // console.log(print);
}

/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞
 * –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è
 * –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±—ñ–ª—É.
 * –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.
 */

const string = "Welcome to the future dear friends";

// const words = string.split(" ");
// console.log("üöÄ ~ words:", words);

// const startElemIdx = 1;
// const lastElemIdx = words.length - 1;

// const cutWords = words.slice(startElemIdx, lastElemIdx);
// console.log("üöÄ ~ cutWords:", cutWords);

// const updString = cutWords.join(" ")
// console.log("üöÄ ~ updString:", updString)

function excludeFirstAndLastWord(text) {
  const words = text.split(" ");

  const startElemIdx = 1;
  const lastElemIdx = words.length - 1;
  const cutWords = words.slice(startElemIdx, lastElemIdx);
  return cutWords.join(" ");
}

const result1 = excludeFirstAndLastWord(string);
// console.log("üöÄ ~ result1:", result1);

const result2 = excludeFirstAndLastWord("–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
// console.log("üöÄ ~ result2:", result2);

/**
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
 * –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.
 */

const values = [0, 2, 17, 94, 1, 23, 37];
let min;

min = values[0];
// debugger;

// for (let i = 1; i < values.length; i++) {
//   const currentValue = values[i];

//   if (min > currentValue) {
//     min = currentValue
//   }
// }

for (const value of values.slice(1)) {
  // console.log(value);
  if (min > value) {
    min = value
  }
}

// console.log(min); // 1


const arrNumbers = [0, 2, 17, 94, 1, -100, 23, 37];

const minNumber = Math.min(...arrNumbers);
// console.log("üöÄ ~ minNumber:", minNumber);
const maxNumber = Math.max(...arrNumbers);
// console.log("üöÄ ~ maxNumber:", maxNumber);

const matrix = [
  [1,2,3],
  [4,5,6],
  [7,8,9]
];

for (let i = 0; i < matrix.length; i++) {
  const row = matrix[i];

  for (let j = 0; j < row.length; j++) {
    // const element = row[j];
    row[j] *= 2
  }
}

console.table(matrix);
