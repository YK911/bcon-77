/**
 * –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
 *
 * - –ü–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤–∞
 * - –ü–æ—à—É–∫ –æ–±'—î–∫—Ç–∞ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
 * - –ö–æ–ª–µ–∫—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
 */

// const friends = [
//   { name: 'Mango', online: false },
//   { name: 'Kiwi', online: true },
//   { name: 'Poly', online: false },
//   { name: 'Ajax', online: false },
// ];

// class Friend {
//   constructor(name, online) {
//     this.name = name;
//     this.online = online;
//   }
// }

// class Bestfriend extends Friend {
//   constructor(name, online, isBestFriend) {
//     super(name, online);

//     this.isBestFriend = isBestFriend;
//   }
// }

// const friend = new Friend('Kiwi', true);
// console.log('üöÄ ~ friend:', friend);

// const bestFriend = new Bestfriend('Poly', false, true);
// console.log('üöÄ ~ bestFriend:', bestFriend);

// console.log(bestFriend);

// console.table(friends);

/**
 * –ü–æ—à—É–∫ –¥—Ä—É–≥–∞ –∑–∞ —ñ–º–µ–Ω–µ–º
 */
function findFriendByName(allFriends, friendName) {
  // arguments = []
  // allFriends = [{}, {}, {}, {}]
  // friendName = 'Poly'

  for (const friend of allFriends) {
    // console.log(friend['name']);
    // console.log(friend.name);
    // console.log(friend);
    if (friend.name === friendName) {
      // console.log('Find', friend.name);
      return friend;
    }
  }

  return null;
}

// const res1 = findFriendByName(friends, 'Poly');
// console.log('üöÄ ~ res1:', res1);
// const res2 = findFriendByName(friends, 'Chelsy');
// console.log('üöÄ ~ res2:', res2);

/**
 * –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º–µ–Ω–∞ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤
 */
const friends = [
  { name: 'Mango', online: false },
  { name: 'Kiwi', online: true },
  { name: 'Poly', online: false },
  { name: 'Ajax', online: true },
];

function getAllNames(allFriends) {
  const names = [];

  for (const friend of allFriends) {
    // console.log(friend.name);
    if (friend.name !== undefined) {
      names.push(friend.name);
    }
  }

  return names;
}

const res3 = getAllNames(friends);
// console.log('üöÄ ~ res3:', res3);

/**
 * –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º–µ–Ω–∞ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö –¥—Ä—É–∑—ñ–≤, —è–∫—ñ –∑–∞—Ä–∞–∑ –æ–Ω–ª–∞–π–Ω
 */
function getOnlineFriends(allFriends) {
  const names = [];

  for (const friend of allFriends) {
    if (friend.online) {
      names.push(friend.name);
    }
  }

  return names;
}

const res4 = getOnlineFriends(friends);
// console.log('üöÄ ~ res4:', res4);

/**
 * –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calcTotalPrice(stones, stoneName),
 * —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞ —Ä—è–¥–æ–∫ –∑ –Ω–∞–∑–≤–æ—é –∫–∞–º–µ–Ω—é.
 * –§—É–Ω–∫—Ü—ñ—è —Ä–∞—Ö—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º—ñ–Ω–Ω—è –∑
 * —Ç–∞–∫–∏–º —ñ–º'—è–º, —Ü—ñ–Ω–æ—é —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑ –æ–±'—î–∫—Ç–∞
 */

const stones = [
  { name: '–°–º–∞—Ä–∞–≥–¥', price: 1300, quantity: 4 },
  { name: '–î—ñ–∞–º–∞–Ω—Ç', price: 2700, quantity: 3 },
  { name: '–°–∞–ø—Ñ—ñ—Ä', price: 400, quantity: 7 },
  { name: '–©–µ–±—ñ–Ω—å', price: 200, quantity: 2 },
];

function calcTotalPrice(stones, stoneName) {
  for (const stone of stones) {
    if (stone.name === stoneName) {
      return stone.price * stone.quantity;
    }
  }

  return `${stoneName} is not find`;
}

const res5 = calcTotalPrice(stones, '–î—ñ–∞–º–∞–Ω—Ç');
console.log('üöÄ ~ res5:', res5);

const res6 = calcTotalPrice(stones, '–©–µ–±—ñ–Ω—å');
console.log('üöÄ ~ res6:', res6);

const res7 = calcTotalPrice(stones, '–†—É–±—ñ–Ω');
console.log('üöÄ ~ res7:', res7);
